/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../../contracts/ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maxBatchSize_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collectionSize_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextOwnerToExplicitlySet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040526000805560006007553480156200001a57600080fd5b50604051620019fe380380620019fe8339810160408190526200003d91620002a3565b60008111620000aa5760405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20636f6c6c656374696f6e206d757374206861766520612060448201526d6e6f6e7a65726f20737570706c7960901b60648201526084015b60405180910390fd5b600082116200010c5760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b6064820152608401620000a1565b8351620001219060019060208701906200014a565b508251620001379060029060208601906200014a565b5060a091909152608052506200036d9050565b82805462000158906200031a565b90600052602060002090601f0160209004810192826200017c5760008555620001c7565b82601f106200019757805160ff1916838001178555620001c7565b82800160010185558215620001c7579182015b82811115620001c7578251825591602001919060010190620001aa565b50620001d5929150620001d9565b5090565b5b80821115620001d55760008155600101620001da565b600082601f83011262000201578081fd5b81516001600160401b03808211156200021e576200021e62000357565b604051601f8301601f19908116603f0116810190828211818310171562000249576200024962000357565b8160405283815260209250868385880101111562000265578485fd5b8491505b8382101562000288578582018301518183018401529082019062000269565b838211156200029957848385830101525b9695505050505050565b60008060008060808587031215620002b9578384fd5b84516001600160401b0380821115620002d0578586fd5b620002de88838901620001f0565b95506020870151915080821115620002f4578485fd5b506200030387828801620001f0565b604087015160609097015195989097509350505050565b600181811c908216806200032f57607f821691505b602082108114156200035157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160a0516116676200039760003960008181610e230152610e4d0152600050506116676000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80634f6ccce7116100a2578063a22cb46511610071578063a22cb46514610219578063b88d4fde1461022c578063c87b56dd1461023f578063d7224ba014610252578063e985e9c51461025b57600080fd5b80634f6ccce7146101d85780636352211e146101eb57806370a08231146101fe57806395d89b411461021157600080fd5b806318160ddd116100de57806318160ddd1461018d57806323b872dd1461019f5780632f745c59146101b257806342842e0e146101c557600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b314610178575b600080fd5b61012361011e36600461134e565b610297565b60405190151581526020015b60405180910390f35b610140610304565b60405161012f9190611436565b61016061015b366004611386565b610396565b6040516001600160a01b03909116815260200161012f565b61018b610186366004611325565b610426565b005b6000545b60405190815260200161012f565b61018b6101ad3660046111db565b61053e565b6101916101c0366004611325565b610549565b61018b6101d33660046111db565b6106b7565b6101916101e6366004611386565b6106d2565b6101606101f9366004611386565b610734565b61019161020c36600461118f565b610746565b6101406107d7565b61018b6102273660046112eb565b6107e6565b61018b61023a366004611216565b6108ab565b61014061024d366004611386565b6108e4565b61019160075481565b6101236102693660046111a9565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102c857506001600160e01b03198216635b5e139f60e01b145b806102e357506001600160e01b0319821663780e9d6360e01b145b806102fe57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600180546103139061156c565b80601f016020809104026020016040519081016040528092919081815260200182805461033f9061156c565b801561038c5780601f106103615761010080835404028352916020019161038c565b820191906000526020600020905b81548152906001019060200180831161036f57829003601f168201915b5050505050905090565b60006103a3826000541190565b61040a5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b600061043182610734565b9050806001600160a01b0316836001600160a01b031614156104a05760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b6064820152608401610401565b336001600160a01b03821614806104bc57506104bc8133610269565b61052e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c000000000000006064820152608401610401565b6105398383836109be565b505050565b610539838383610a1a565b600061055483610746565b82106105ad5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b6064820152608401610401565b600080549080805b83811015610657576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff16918301919091521561060857805192505b876001600160a01b0316836001600160a01b031614156106445786841415610636575093506102fe92505050565b83610640816115a7565b9450505b508061064f816115a7565b9150506105b5565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b6064820152608401610401565b610539838383604051806020016040528060008152506108ab565b6000805482106107305760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b6064820152608401610401565b5090565b600061073f82610da1565b5192915050565b60006001600160a01b0382166107b25760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b6064820152608401610401565b506001600160a01b03166000908152600460205260409020546001600160801b031690565b6060600280546103139061156c565b6001600160a01b03821633141561083f5760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c65720000000000006044820152606401610401565b3360008181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6108b6848484610a1a565b6108c284848484610f4b565b6108de5760405162461bcd60e51b815260040161040190611449565b50505050565b60606108f1826000541190565b6109555760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610401565b600061096c60408051602081019091526000815290565b9050600081511161098c57604051806020016040528060008152506109b7565b8061099684611059565b6040516020016109a79291906113ca565b6040516020818303038152906040525b9392505050565b60008281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000610a2582610da1565b80519091506000906001600160a01b0316336001600160a01b03161480610a5c575033610a5184610396565b6001600160a01b0316145b80610a6e57508151610a6e9033610269565b905080610ad85760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610401565b846001600160a01b031682600001516001600160a01b031614610b4c5760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b6064820152608401610401565b6001600160a01b038416610bb05760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610401565b610bc060008484600001516109be565b6001600160a01b0385166000908152600460205260408120805460019290610bf29084906001600160801b03166114ea565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b03861660009081526004602052604081208054600194509092610c3e9185911661149c565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff428116602080850191825260008981526003909152948520935184549151909216600160a01b026001600160e01b03199091169190921617179055610cc68460016114be565b6000818152600360205260409020549091506001600160a01b0316610d5857610cf0816000541190565b15610d585760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081526000878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6040805180820190915260008082526020820152610dc0826000541190565b610e1f5760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610401565b60007f00000000000000000000000000000000000000000000000000000000000000008310610e8057610e727f000000000000000000000000000000000000000000000000000000000000000084611512565b610e7d9060016114be565b90505b825b818110610eea576000818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610ed757949350505050565b5080610ee281611555565b915050610e82565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b6064820152608401610401565b60006001600160a01b0384163b1561104d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f8f9033908990889088906004016113f9565b602060405180830381600087803b158015610fa957600080fd5b505af1925050508015610fd9575060408051601f3d908101601f19168201909252610fd69181019061136a565b60015b611033573d808015611007576040519150601f19603f3d011682016040523d82523d6000602084013e61100c565b606091505b50805161102b5760405162461bcd60e51b815260040161040190611449565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611051565b5060015b949350505050565b60608161107d5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110a75780611091816115a7565b91506110a09050600a836114d6565b9150611081565b60008167ffffffffffffffff8111156110d057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156110fa576020820181803683370190505b5090505b84156110515761110f600183611512565b915061111c600a866115c2565b6111279060306114be565b60f81b81838151811061114a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535061116c600a866114d6565b94506110fe565b80356001600160a01b038116811461118a57600080fd5b919050565b6000602082840312156111a0578081fd5b6109b782611173565b600080604083850312156111bb578081fd5b6111c483611173565b91506111d260208401611173565b90509250929050565b6000806000606084860312156111ef578081fd5b6111f884611173565b925061120660208501611173565b9150604084013590509250925092565b6000806000806080858703121561122b578081fd5b61123485611173565b935061124260208601611173565b925060408501359150606085013567ffffffffffffffff80821115611265578283fd5b818701915087601f830112611278578283fd5b81358181111561128a5761128a611602565b604051601f8201601f19908116603f011681019083821181831017156112b2576112b2611602565b816040528281528a60208487010111156112ca578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156112fd578182fd5b61130683611173565b91506020830135801515811461131a578182fd5b809150509250929050565b60008060408385031215611337578182fd5b61134083611173565b946020939093013593505050565b60006020828403121561135f578081fd5b81356109b781611618565b60006020828403121561137b578081fd5b81516109b781611618565b600060208284031215611397578081fd5b5035919050565b600081518084526113b6816020860160208601611529565b601f01601f19169290920160200192915050565b600083516113dc818460208801611529565b8351908301906113f0818360208801611529565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061142c9083018461139e565b9695505050505050565b6020815260006109b7602083018461139e565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b60006001600160801b038083168185168083038211156113f0576113f06115d6565b600082198211156114d1576114d16115d6565b500190565b6000826114e5576114e56115ec565b500490565b60006001600160801b038381169083168181101561150a5761150a6115d6565b039392505050565b600082821015611524576115246115d6565b500390565b60005b8381101561154457818101518382015260200161152c565b838111156108de5750506000910152565b600081611564576115646115d6565b506000190190565b600181811c9082168061158057607f821691505b602082108114156115a157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156115bb576115bb6115d6565b5060010190565b6000826115d1576115d16115ec565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461162e57600080fd5b5056fea26469706673582212202747ec8e78dbf17c07e27c4405db2a9f6861da85ae23dabda60303ba5793f0b864736f6c63430008040033";

type ERC721AConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721AConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721A__factory extends ContractFactory {
  constructor(...args: ERC721AConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    maxBatchSize_: BigNumberish,
    collectionSize_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(
      name_,
      symbol_,
      maxBatchSize_,
      collectionSize_,
      overrides || {}
    ) as Promise<ERC721A>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    maxBatchSize_: BigNumberish,
    collectionSize_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      maxBatchSize_,
      collectionSize_,
      overrides || {}
    );
  }
  override attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  override connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
